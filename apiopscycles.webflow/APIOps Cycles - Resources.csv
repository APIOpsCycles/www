Name,Slug,Collection ID,Item ID,Archived,Draft,Created On,Updated On,Published On,Recource phase number,Icon,Purpose,Navigation,Collaboration,Quality,Speed,Tips for use,Steps,Section 1 image,Button link 1,Button link 2,Button link 3,Sorting order,Previous phase,Next phase,Related resources,Method phase
API Audit Checklist,api-audit-checklist-main,6101c6ebcdae68a8724b444c,610433961ca16d141ad69258,false,false,Fri Jul 30 2021 17:15:02 GMT+0000 (Coordinated Universal Time),Sat Oct 22 2022 13:34:41 GMT+0000 (Coordinated Universal Time),Sat Oct 22 2022 13:38:35 GMT+0000 (Coordinated Universal Time),4,,"Use this checklist to audit your API prototype or a ready made API before publishing it to stakeholders, or, why not before buying an API",,,,,,,,,,,8,,,,api-audit
API Business Model Canvas,api-business-model-canvas,6101c6ebcdae68a8724b444c,6101c6ebcdae68177c4b4511,false,false,Wed Jul 28 2021 07:29:39 GMT+0000 (Coordinated Universal Time),Mon Jan 27 2025 12:22:59 GMT+0000 (Coordinated Universal Time),Mon Jan 27 2025 12:23:22 GMT+0000 (Coordinated Universal Time),1,https://cdn.prod.website-files.com/60b12ba7f99f5f63ddf349aa/677ef3044c6b269c7c2a3658_apiBusinessModelCanvas.png,How feasible and reusable will this API be? Use API Business Model canvas to evaluate the business case from a cost-benefit perspective,"Start by summarizing the API Value Proposition Canvas and proceed step-by-step to assess business feasibility, including partners, activities, and consumer segments","Involves input from business strategists, API developers, and stakeholders to map partnerships, activities, and resource allocation",Ensures APIs align with business goals and provide measurable benefits while maintaining compliance with financial and strategic objectives,"By organizing resources and partners effectively, it accelerates decision-making and implementation of high-value APIs","<ul id=""""><li id="""">Begin with a single API to ensure clarity.</li><li id="""">Use metrics like cost vs. benefit to prioritize opportunities.</li><li id="""">Validate outputs with key stakeholders to align on feasibility.</li></ul>","<ol id=""""><li id="""">API Value Proposition: Summarize the API’s value to consumers</li><li id="""">API Consumer Segments: Define who the API serves.</li><li id="""">Developer Relations: Identify strategies to engage developers.</li><li id="""">Channels: Define distribution channels.</li><li id="""">Key Resources: Document critical resources.</li><li id="""">Key Activities: List necessary activities.</li><li id="""">Key Partners: Map key stakeholders and partnerships.</li><li id="""">Benefits: Highlight benefits like revenue or cost savings.</li><li id="""">Costs: Detail the associated costs.</li></ol>",https://cdn.prod.website-files.com/60b12ba7f99f5f63ddf349aa/677ef278bc81593436808fc9_apiBusinessModelCanvas.svg,https://cdn.prod.website-files.com/60b12ba7f99f5f63ddf349aa/677ef278bc81593436808fc9_apiBusinessModelCanvas.svg,,,2,api-value-proposition-canvas,business-impact-canvas,domain-canvas,api-product-strategy
API  Value Proposition Canvas,api-value-proposition-canvas,6101c6ebcdae68a8724b444c,6101c6ebcdae687cbc4b450e,false,false,Wed Jul 28 2021 07:29:39 GMT+0000 (Coordinated Universal Time),Mon Jan 27 2025 12:22:39 GMT+0000 (Coordinated Universal Time),Mon Jan 27 2025 12:23:22 GMT+0000 (Coordinated Universal Time),2,https://cdn.prod.website-files.com/60b12ba7f99f5f63ddf349aa/677ef448ffc31462e39fe306_apiValuePropositionCanvas.png,The API Value Proposition Canvas defines how an API delivers value by linking user tasks and challenges to API features.," List user journey tasks, identify pains and gains, and match features to solve problems",Requires insights from API consumers (developers) and internal teams to align features with user needs.,Ensures API features directly address user challenges and provide expected gains.,"Helps focus on high-impact features, reducing time spent on irrelevant solutions.","<ul id=""""><li>Use input from the Customer Journey Canvas.</li><li>Highlight features that relieve pains or enhance gains.</li><li>Validate features with API consumers to ensure alignment.</li></ul>","<ol id=""""><li id="""">Tasks: List user journey tasks.</li><li id="""">Gain Enabling Features: Identify features delivering expected gains.</li><li id="""">Pain Relieving Features: Define features addressing challenges.</li><li id="""">API Products: Map features to API products.</li></ol>",https://cdn.prod.website-files.com/60b12ba7f99f5f63ddf349aa/677ef4949d406bc8abc257a7_apiValuePropositionCanvas.svg,,https://cdn.prod.website-files.com/60b12ba7f99f5f63ddf349aa/677ef4949d406bc8abc257a7_apiValuePropositionCanvas.svg,,1,customer-journey-canvas,api-business-model-canvas,,api-product-strategy
Business Impact Canvas,business-impact-canvas,6101c6ebcdae68a8724b444c,6101c6ebcdae68361c4b4513,false,false,Wed Jul 28 2021 07:29:39 GMT+0000 (Coordinated Universal Time),Mon Jan 13 2025 06:32:03 GMT+0000 (Coordinated Universal Time),Mon Jan 13 2025 06:34:12 GMT+0000 (Coordinated Universal Time),4,https://cdn.prod.website-files.com/60b12ba7f99f5f63ddf349aa/677ef6f137b398116c0834c3_businessImpactCanvas.png,"The Business Impact Canvas helps to identify and mitigate risks related to API availability, security, and functionality to support informed architectural decisions.","First, identify risks, then document impacts, and map mitigation strategies.","Requires contributions from architects, developers, and business leaders to ensure risks are identified comprehensively.","Ensures APIs meet business requirements for availability, security, and data accuracy.",Proactively mitigating risks reduces downtime and avoids delays caused by unforeseen issues.,"<ul id=""""><li id="""">Prioritize critical APIs with the highest business impact.</li><li id="""">Use past incidents to identify potential risks.</li><li id="""">Include cost estimates for all mitigation strategies.</li></ul>","<ol id=""""><li>Availability Risks: Identify risks and impacts.</li><li>Ways to Mitigate Availability Risks: Define mitigation measures.</li><li>Security Risks: Document security-related risks.</li><li>Ways to Mitigate Security Risks: Propose strategies to mitigate security risks.</li><li>Data Risks: Identify risks to data accuracy or availability.</li><li>Ways to Mitigate Data Risks: Plan strategies to address data risks.</li></ol><p>‍</p>",https://cdn.prod.website-files.com/60b12ba7f99f5f63ddf349aa/677ef763ab691bb016708624_businessImpactCanvas.svg,https://cdn.prod.website-files.com/60b12ba7f99f5f63ddf349aa/677ef763ab691bb016708624_businessImpactCanvas.svg,,,3,api-business-model-canvas,capacity-canvas,,api-platform-architecture
Capacity Canvas,capacity-canvas,6101c6ebcdae68a8724b444c,6101c6ebcdae685aee4b4514,false,false,Wed Jul 28 2021 07:32:33 GMT+0000 (Coordinated Universal Time),Mon Jan 13 2025 06:13:45 GMT+0000 (Coordinated Universal Time),Mon Jan 13 2025 06:34:12 GMT+0000 (Coordinated Universal Time),5,https://cdn.prod.website-files.com/60b12ba7f99f5f63ddf349aa/677ef81d824f581a366dc723_capacityCanvas.png,"The Capacity Canvas aligns business transaction patterns, future consumption trends, and technical solutions to ensure API scalability and performance.It provides critical input for scaling decisions and infrastructure planning.","Document current usage patterns, predict future trends, and align capacity planning with these insights.","Involves developers, architects, and business leaders to ensure scalability meets projected needs.",Prepares APIs for future demand spikes and ensures they meet performance standards.,Anticipating growth trends helps avoid bottlenecks and supports rapid scaling.,"<ul id=""""><li>Use analytics to forecast growth trends.</li><li>Define peak usage scenarios.</li><li>Include scalability testing in the planning phase.</li></ul>","<ol id=""""><li>Current Business Volumes: Document usage patterns.</li><li>Future Consumption Trends: Forecast future needs.</li><li>Peak Load and Availability Requirements: Plan for peak scenarios.</li><li>Caching Strategies: Define caching approaches.</li><li>Rate-Limiting Strategies: Plan rate-limiting policies.</li><li>Scaling Strategies: Propose dynamic scaling solutions.</li></ol>",https://cdn.prod.website-files.com/60b12ba7f99f5f63ddf349aa/677ef82126f7b3e10c3c586e_capacityCanvas.svg,https://cdn.prod.website-files.com/60b12ba7f99f5f63ddf349aa/677ef82126f7b3e10c3c586e_capacityCanvas.svg,,,5,business-impact-canvas,locations-canvas,,api-platform-architecture
Customer Journey Canvas,customer-journey-canvas,6101c6ebcdae68a8724b444c,677ef33c25a553631c4eb451,false,false,Wed Jan 08 2025 21:50:52 GMT+0000 (Coordinated Universal Time),Mon Jan 13 2025 06:19:37 GMT+0000 (Coordinated Universal Time),Mon Jan 13 2025 06:34:12 GMT+0000 (Coordinated Universal Time),1,https://cdn.prod.website-files.com/60b12ba7f99f5f63ddf349aa/677ef3253b915cea53499080_customerJourneyCanvas.png,"Visualize, iterate, and optimize the target state customer journey while identifying gains and pains.","Start by mapping journey steps, identifying triggers, and resolving pain points.",Engages teams to align on customer challenges and how APIs address them.,Ensures APIs enhance customer experiences and meet user needs.,Streamlined journeys reduce delays and improve time-to-solution.,"<ul id=""""><li>Iterate with team input to refine steps.</li><li>Use outputs from this canvas to inform other canvases like the API Value Proposition Canvas.</li></ul>","<h3 id="""">Customer Discovers Need&nbsp;</h3><ol id=""""><li>Persona: Define the customer persona.</li><li>Customer Discovers Need: Identify triggers for the journey.</li><li>Customer's Need is Resolved: Describe the journey's end.</li><li>Journey Steps: Map journey steps with inputs/outputs.</li><li>Pains: Identify customer pains.</li><li>Gains: Summarize customer gains.</li><li>Inputs &amp; Outputs: Define necessary inputs and resulting outputs.</li><li>Interaction/Processing Rules: Define API interactions for each step.</li></ol>",https://cdn.prod.website-files.com/60b12ba7f99f5f63ddf349aa/677ef27ffba8d10248c522b5_customerJourneyCanvas.svg,https://cdn.prod.website-files.com/60b12ba7f99f5f63ddf349aa/677ef27ffba8d10248c522b5_customerJourneyCanvas.svg,,,1,,api-value-proposition-canvas,api-business-model-canvas; api-value-proposition-canvas; domain-canvas,api-product-strategy
Domain Canvas,domain-canvas,6101c6ebcdae68a8724b444c,6101c6ebcdae6816d84b4512,false,false,Wed Jul 28 2021 07:29:39 GMT+0000 (Coordinated Universal Time),Mon Jan 13 2025 06:25:02 GMT+0000 (Coordinated Universal Time),Mon Jan 13 2025 06:34:12 GMT+0000 (Coordinated Universal Time),3,https://cdn.prod.website-files.com/60b12ba7f99f5f63ddf349aa/677ef96a675ca17d00429739_domainCanvas.png," Define core entities, their attributes, and relationships to create a shared conceptual understanding across APIs.","Start by listing entities and their attributes, followed by defining relationships to create a holistic domain model.","Start by listing entities and their attributes, followed by defining relationships to create a holistic domain model.","Ensures data models and entities are consistent and reusable across APIs, reducing redundancy.","By defining a consistent domain model, teams can avoid rework and build APIs faster.","<ul id=""""><li>Align with outputs from the Customer Journey Canvas.</li><li>Document examples for each entity and relationship.</li><li>Validate the domain model with multiple stakeholders.</li></ul>","<ol id=""""><li>Entities: Define core entities relevant to your domain.</li><li>Attributes: Document the attributes for each entity.</li><li>Relationships: Map relationships between entities.</li><li>Shared Concepts: Identify shared concepts across APIs.</li><li>API Impact: Link domain concepts to API features or products.</li></ol>",https://cdn.prod.website-files.com/60b12ba7f99f5f63ddf349aa/677ef9abe094f8b306fc1317_domainCanvas.svg,https://cdn.prod.website-files.com/60b12ba7f99f5f63ddf349aa/677ef9abe094f8b306fc1317_domainCanvas.svg,,,6,customer-journey-canvas,business-impact-canvas,business-impact-canvas; locations-canvas; api-value-proposition-canvas; api-business-model-canvas,api-design
Facilitating Discussion with an IoT Canvas,facilitating-discussion-with-an-iot-canvas,6101c6ebcdae68a8724b444c,650a90ca6152c2eaf67bcbff,true,true,Wed Sep 20 2023 06:27:22 GMT+0000 (Coordinated Universal Time),Wed Jan 08 2025 22:27:16 GMT+0000 (Coordinated Universal Time),,9,,"One of the fundamental challenges in IoT projects is that various IT specialists, device experts, platform providers, and business experts often fail to understand one another – or, more precisely, the implications of each other's domains on their own. In the realm of IoT, business expertise encapsulates all areas where IoT is utilised.",,,,,"<p id="""">For instance, experts might oversee aspects ranging from traffic light control to transportation and environmental issues. Consequently, project planning meetings can easily devolve into a series of monologues by these experts, with interactions reminiscent of ships passing in the night.</p><p id="""">‍</p><p>‍</p>","<p id="""">Columns on the canvas represent organisational objectives, usability requirements (including environmental conditions, especially for devices), data requirements, and technology and security requirements. Rows cater to applications, storage locations, communication with devices (i.e., the core of the IoT platform), and the devices with their embedded software.</p><p id="""">The underlying principle is that moving from left to right and top to bottom, the various columns and layers influence each other and pose requirements to one another. Read in the opposite direction; they offer opportunities to each other.</p><p id="""">To maximise the benefit of the canvas, use it before letting specialists from different fields speak up. The canvas can also be leveraged in ecosystem projects, where different organisations are responsible for different canvas sections.</p><p id="""">Image 1: Canvas to conceptualise IoT solutions supporting the procurement process.</p><p id="""">Image 2: Completed canvas (anonymised version from an actual workshop)</p><p id="""">Instructions for Using the Canvas:</p><ol id=""""><li id="""">Invite the project/procurement planning team and any necessary external experts to a workshop. Participants should possess business knowledge, an understanding of the organisation/project goals, environment, and users, as well as technical expertise from various IoT and IT areas. Allocate around 1 to 1.5 hours.</li><li id="""">Collaboratively fill in the canvas shown in Image 3 using sticky notes on flip chart paper or via a digital collaboration platform. The completion is quick, but participants must be provided with brief background information and some debriefing time.</li><li id="""">Ask each participant to start with the most familiar topic or one they have any thoughts or questions about. (See examples provided after the instructions for inspiration).</li><li id="""">Review the canvas collectively, engaging in discussions and seeking clarifications where needed. Start from the left, move right, and from the top down, commencing with organisational goals and concluding with technology and security requirements. Re-arrange sticky notes and add details as necessary.</li><li id="""">Conclude by discussing the most pressing open questions and identified challenges. Decide on assigning responsibility before taking further actions (e.g., detailing objectives, mapping architecture, refining requirements, drafting guidelines, or agreeing on roles). Summarise the discussion in a few final remarks.</li></ol><p id="""">Examples of Requirements and Questions:</p><p id=""""><strong id="""">Organisational/Business Requirements:</strong>&nbsp;</p><ul id=""""><li id="""">Acceleration and fuel consumption monitoring;&nbsp;</li><li id="""">a variety of sensor types for future purposes;&nbsp;</li><li id="""">device power consumption; the impact of device lifecycle and lifespan on costs;&nbsp;</li><li id="""">clearer communication; automated data production; knowledge on what data moves where and how; reduced vendor dependency;&nbsp;</li><li id="""">cost reductions: operating vs. development costs, e.g., open-source app development vs. using a predefined interface;&nbsp;</li><li id="""">improved road safety, impact and potential business opportunities in the area.</li></ul><p id=""""><strong id="""">Usability and Environmental Resilience (devices, e.g., sensors):&nbsp;</strong></p><ul id=""""><li id="""">Easy installation;</li><li id="""">standardised installation models;&nbsp;</li><li id="""">low maintenance but maintainable;&nbsp;</li><li id="""">automated power supply (no battery replacement) and power-saving;&nbsp;</li><li id="""">ability to calibrate;&nbsp;</li><li id="""">24/7/365 reliability and durability;&nbsp;</li><li id="""">exposure to road salt, solvents, and other chemicals; temperature, humidity etc. for indoor, outdoor, and northern conditions.</li></ul><p id=""""><strong id="""">Data Requirements:&nbsp;</strong></p><ul id=""""><li id="""">What are the requirements for data and data transfer when purchasing new equipment?&nbsp;</li><li id="""">Are there any standard guidelines?&nbsp;</li><li id="""">Who/what is measured? What information can be collected (considering GDPR)? What is recognised? Ensure objectives for a data governance model are in place and outline the management model; should collected data be freely available? And to whom? Through apps or interfaces or both? Requirements related to data format and modelling.</li></ul><p id=""""><strong id="""">Technology and Security Requirements:&nbsp;</strong></p><ul id=""""><li id="""">Communication requirements and network solutions, e.g., mobile network compatibility;</li><li id="""">documented installation models;&nbsp;</li><li id="""">documented contact points, including physical installation permissions;&nbsp;</li><li id="""">documentation and guidelines (and monitoring) for protecting device networks;&nbsp;</li><li id="""">how to safeguard connections and devices from vandalism or cyberattacks;&nbsp;</li><li id="""">edge computing device requirements and optimal location;&nbsp;</li><li id="""">IoT platform as a SaaS solution; source code licensing (e.g., open-source);&nbsp;</li><li id="""">machine learning model licensing;&nbsp;</li><li id="""">data licensing;&nbsp;</li><li id="""">API management;&nbsp;</li><li id="""">documented interfaces;&nbsp;</li><li id="""">data governance;&nbsp;</li><li id="""">access management to devices, data, interfaces, and applications.</li></ul><p id="""">‍</p>",https://cdn.prod.website-files.com/60b12ba7f99f5f63ddf349aa/650a9093fdc5045f2b9c8487_apiops%20cycles%20iot%20canvas.png,,,,9,,,,
API Identity and access management,identity-and-access-management,6101c6ebcdae68a8724b444c,6101c6ebcdae686c6d4b44e5,false,true,Wed Jul 28 2021 07:33:11 GMT+0000 (Coordinated Universal Time),Sat Oct 22 2022 13:26:26 GMT+0000 (Coordinated Universal Time),,8,,How to plan security for your APIs?,,,,,,"<h3>Identity</h3><p>Is there a need to identify users? What are the common identifiers between the API Consumer and the API (email, customer number, social security number)? How are the API consumer’s end-users authenticated?</p><h3>Identity, authorization and access management + securing data in all of it's stages</h3><p>Identity management, authorization, and access management are important for securing APIs, but also related to the applications consuming or providing the APIs. Sensitive information should always use token and session-based access, as the API-keys are in general never changed and are handled in plain language without any encryption, so someone can get access to them.</p><h3>Headers, tokens or URLs for authentication data</h3><ul><li>The best approach for securing APIs containing sensitive information and requiring user-level access management is to use OpenID Connect –capable authentication with JWT-tokens and claims.</li><li>This requires agreeing on how the applications get the token, how is the identity of end-users managed etc.</li><li>Sometimes API consuming clients have limitations on what types of authentication methods they can use.</li><li>Most consumers can use API-keys in headers, but some can only input URI-parameters. These types of consumers should not be allowed access to sensitive information at all, as the URI-parameters are logged during all points and are easily “sniffed”.</li></ul><p><br></p><p>‍</p>",,,,,7,locations-canvas,rest-api-design-guide,,api-consumer-experience
Interaction Canvas,interaction-canvas,6101c6ebcdae68a8724b444c,677efaab768aab4c0f776971,false,false,Wed Jan 08 2025 22:22:35 GMT+0000 (Coordinated Universal Time),Mon Jan 27 2025 12:23:10 GMT+0000 (Coordinated Universal Time),Mon Jan 27 2025 12:23:22 GMT+0000 (Coordinated Universal Time),12,https://cdn.prod.website-files.com/60b12ba7f99f5f63ddf349aa/677efa37ad2ec2a799930312_interactionCanvas.png,"Plan and design API interactions, focusing on workflows, inputs, outputs, and potential exceptions.","Begin with identifying core interactions and their objectives, followed by designing workflows and responses.","Involves product managers, architects, and developers to ensure workflows meet consumer expectations.",Improves user experience by ensuring APIs handle interactions intuitively and consistently.,"By pre-defining workflows, reduces ambiguity and accelerates API implementation.","<ul id=""""><li>Start with common use cases before handling edge cases.</li><li>Simulate interactions with mock data to validate workflows.</li><li>Document expected responses for successful and unsuccessful interactions.</li></ul>","<ol id=""""><li id="""">Interaction Goals: Define the purpose of each interaction.</li><li id="""">Inputs: Document required inputs for the interaction.</li><li id="""">Outputs: Define the expected outputs or responses.</li><li id="""">Workflow: Map the sequence of steps for the interaction.</li><li id="""">Exceptions: Identify and document potential exceptions or edge cases.</li><li id="""">Feedback: Include mechanisms for users to provide feedback on interactions.</li></ol>",https://cdn.prod.website-files.com/60b12ba7f99f5f63ddf349aa/677efa5da987bb04bf2584f3_interactionCanvas.svg,https://cdn.prod.website-files.com/60b12ba7f99f5f63ddf349aa/677efa5da987bb04bf2584f3_interactionCanvas.svg,,,16,api-value-proposition-canvas,domain-canvas,business-impact-canvas; capacity-canvas; locations-canvas,api-design
Locations Canvas,locations-canvas,6101c6ebcdae68a8724b444c,6101c6ebcdae68d6b14b4515,false,false,Wed Jul 28 2021 07:32:52 GMT+0000 (Coordinated Universal Time),Mon Jan 13 2025 06:31:18 GMT+0000 (Coordinated Universal Time),Mon Jan 13 2025 06:34:12 GMT+0000 (Coordinated Universal Time),6,https://cdn.prod.website-files.com/60b12ba7f99f5f63ddf349aa/677ef8e9ff765ea932012c7f_locationsCanvas.png,"Map the regulatory, compliance, and network locations of API providers and consumers to ensure accessibility and compliance.","Begin by identifying all locations where APIs operate, considering compliance and accessibility requirements.","Engages legal, compliance, and technical teams to align on regulatory and performance goals.",Ensures APIs meet local regulatory requirements and provide optimal performance across regions.,Proactively resolving location-based constraints reduces delays in deployment.,"<ul id=""""><li>Document compliance requirements for each location.</li><li>Include data residency considerations in your planning.</li><li>Validate network performance across key regions.</li></ul>","<ol id=""""><li>API Providers: Map locations of API providers.</li><li>API Consumers: Document where consumers are located.</li><li>Regulatory Requirements: Identify applicable regulations.</li><li>Data Residency: Document where data must reside.</li><li>Network Accessibility: Ensure APIs are accessible in all intended regions.</li><li>Performance Validation: Validate network performance across regions.</li></ol>",https://cdn.prod.website-files.com/60b12ba7f99f5f63ddf349aa/677ef8f858b08e0f46587379_locationsCanvas.svg,https://cdn.prod.website-files.com/60b12ba7f99f5f63ddf349aa/677ef8f858b08e0f46587379_locationsCanvas.svg,,,4,capacity-canvas,domain-canvas,,api-platform-architecture
REST API Design Guide,rest-api-design-guide,6101c6ebcdae68a8724b444c,6101c6ebcdae68c0994b44f6,false,false,Wed Jul 28 2021 07:33:25 GMT+0000 (Coordinated Universal Time),Wed Jan 08 2025 22:54:34 GMT+0000 (Coordinated Universal Time),Thu Jan 09 2025 00:54:44 GMT+0000 (Coordinated Universal Time),9,,"How should endpoints i.e. the resources that our API allows the API consumers to use, be named? What features and thus endpoints should be included in the same API? To version or not and how?",,,,,"<p id="""">There are no actual standards for how endpoints etc. should be named. There are some conventions and best practices that help the APIs to be RESTful. These conventions make the API easy to understand by humans as well as programming and integration tools. Design with the next phase, <strong id="""">API Audit</strong> criteria in mind. When designing REST APIs, use the <strong id="""">REST API style guide </strong>as your guideline.</p><p id="""">At first, add only the endpoints and data attributes that you know are necessary. &nbsp;This reduces the need for versioning, support and maintenance. When an API is versioned the API consumers are at risk of having to make changes. There are many APIs that have succeeded in avoiding breaking changes.</p>","<h2>Overview</h2><p>Our goal is consistency, maintainability, and best practices across applications. APIOps aim to balance a truly RESTful API interface with a positive developer experience (DX).</p><h3>In a nutshell:</h3><ul><li>Keep APIs’ functionalities as simple as possible. The endpoints do only one thing, but they do it well.</li><li>Avoid overlapping functionalities between different APIs.</li><li>In case of an error include the API response verbose description. Include also a description of the erroneous parameter value, if it is feasible.</li><li>Implement in each API (or bundle of APIs) ability to generate its own machine-readable document about its functionality.</li><li>API must have support for the OPTIONS endpoint, which is needed for example in a preflight request in SwaggerUI</li></ul><h3>Minimum developer experience</h3><ul><li>Each API must have a descriptive title</li><li>The description of API has to be sufficient.</li><li>Each API must have documentation, either an OpenAPI file or other standard specification that is supported by the API management solution used.</li><li>Each API should have a getting started section to provide a low learning curve and fast 1st positive experience for the consumer</li><li> </li></ul><h3>The format of API specification</h3><p>Use the most recent <a target=""_blank"" href=""https://www.openapis.org/"">OpenAPI</a> version supported by the API management platform to describe your API, unless you are developing your API using GraphQL, AsyncAPI, gRPC or some other standard. <a target=""_blank"" href=""https://en.wikipedia.org/wiki/OpenAPI_Specification"">OpenAPI Specification (Wikipedia)</a> originally known as the Swagger Specification, is a specification for machine-readable interface files for describing, producing, consuming, and visualizing RESTful Web services.</p><p><strong>Information about supported versions:</strong></p><ul><li><a href=""https://www.ibm.com/support/knowledgecenter/SSFS6T/com.ibm.apic.apionprem.doc/create_api_swagger.html"" target=""_blank"">IBM API Connect</a></li><li><a target=""_blank"" href=""https://docs.microsoft.com/en-us/azure/api-management/api-management-get-started#a-namecreate-api-aimport-an-api"">Azure API management</a> - see also <a target=""_blank"" href=""https://docs.microsoft.com/en-us/azure/api-management/api-management-api-import-restrictions"">restrictions and known issues</a></li><li><a target=""_blank"" href=""http://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-export-api.html"">AWS API Gateway</a></li></ul><p>Use examples-attribute with JSON schemas (validated) to provide automatically generated documentation and smart mock data to help use the API.</p><p>‍</p><h3>Naming standards</h3><ul><li>All URI parts including resource names are written in small letters.</li><li>Use only camelCase in all attribute (field) names.</li><li>Do not use special characters in URI or in attribute names.</li><li>Use English only in OpenAPI specification.</li><li>Use common legally used or industry-specific (not company-specific) words about resources and attributes. Refer to ISO standards as a primary source, then use WTO, EU or other trade area-specific vocabularies, <a target=""_blank"" href=""http://schema.org/"">http://schema.org/</a> or industry-specific vocabularies for naming. As a last resort, refer to company-specific vocabularies before inventing your own.</li><li>Avoid using generic names like “type”, “status” etc. without specifying what type, what status or better yet, avoiding those words altogether.</li><li>Use ISO standard or other generally used (see above) values for attribute values such as languages, country names etc. Avoid using magic numbers as values or provide also the human language alternative, preferably according to the Accept-Language header in the request.​​</li></ul><p>‍</p><h3>Localization</h3><p>The Accept-header should be used to support localized strings and possible localized logic. All timestamps should be in ISO format which contains timezone information. All dates and clock times with no specific timezone information associated should be informed in UTC +0.</p><p>All money values should be informed in specific currency and currency information should be contained in a custom x-companyname-currency header (in both request and response). Currency values should default to some provider or consumer based base currency if no specific currency has been requested.</p><p>‍</p><h3>Privacy and security</h3><p>Private or confidential data should not be passed in URI, Query or header parameters as they are logged and cached. Security constraints are defined in API Product level, but privacy and security should be considered when splitting requirements to APIS and endpoints, as security schemes are easier to implement on API level than endpoint level or by reflecting authorization in the allowed operations or response payloads.</p><p>‍</p><h3>Versioning</h3><p>Private or confidential data should not be passed in URI, Query or header parameters as they are logged and cached. Security constraints are defined in API Product l</p><p>Each API consumer needs to know which version of the API they are using and to be able to subscribe and use the version they need. There are mixed opinions about the way the versioning is indicated: whether API version should be included in the URL or in the header.</p><p>The common convention is to have the version in the URL of APIs. The reason is to ensure that the browser is able to explore the resources across versions.</p><p>In some API management systems, the version does not need to be in the URI nor in the header because each API product has its own version and each API consuming client application is only able to use 1 version of the API at a time. If the same client used multiple versions of the same API at a time, they would need different subscriptions. This versioning strategy works with all clients and is suited for caching and HATEOAS.</p><p>Versioning in - <a target=""_blank"" href=""https://docs.microsoft.com/en-us/azure/api-management/api-management-faq#how-do-i-use-api-versioning-in-api-management"">Azure API Management</a></p><p>When the version number is used it should always be in the URI since not all clients (for example marketing tools) can set headers and using version number as a query parameter might cause slowness as query parameters are not cached. Also, most API management platforms require that the URIs are unique if multiple versions of the same API are deployed at the same time.</p><p>The URI should include /vN with the major version (N) as a prefix. Having the letter v in front of the number is important to separate the version number from a resource identifier.</p><p>When APIs are upgraded with a breaking change, it may lead to breaking existing products or services using upgraded APIs.</p><p>Privacy and security should be considered when splitting requirements to APIs and endpoints, as security schemes are easier to implement on API level than endpoint level or by reflecting authorization in the allowed operations or response payloads.</p><h6> Examples of breaking changes:</h6><ul><li>renaming fields or resource paths or endpoints</li><li>changing field type (e.g. from string to a list of strings)</li><li>changing the structure of payload (removing/renaming/retyping fields)</li><li>altering HTTP verbs</li><li>changing response HTTP codes</li></ul><p>In case of breaking changes making a new version of the updated API is mandatory.</p><p>URI Template</p><p>/v{version}/</p><p>Example<a href=""https://domain.com/v1/apis"" target=""_blank""> </a></p><p>https://domain.com/v1/apis</p><p>If there is any major breaking update, the new set of APIs is named as v (version number as integer).</p><p>‍</p><h3>Namespaces</h3><p>In any URI, the first noun (which may be singular or plural, depending on the situation) should be considered a “namespace”. Namespaces should reflect the customer’s perspective on how the product works, not necessarily hierarchy in the company.</p><p>Namespace separates different logical APIs from each other, which is useful if you have lots of APIs with different purposes and they may end up using same resource or operation names.</p><h6>Namespaces in different API management solutions:</h6><ul><li>IBM API Connect uses organizations, catalogs and spaces to organize publishing of APIs. These are useful when there are multiple teams in charge of different APIs. Organization and catalog form the namespace of the API and those are always added automatically before version number or anything defined in the OpenAPI document basepath value or path-variable of each operation.</li><li>Azure API management requires you to define a URI template when adding a new operation or by setting it for all operations in the OpenAPI document basepath value (required).</li></ul><p>URI Template</p><p>/{namespace}/{version}</p><p>Example /hardware/v1/</p><p>‍</p><h3>Resources and HTTP methods</h3><p>Try to use only one resource level, absolutely avoid using more than two levels to keep the URLs short to allow room for using variables.</p><p>URI Template</p><p>/{namespace}/{version}/{resource}/{resource-id}/{sub-resource}/{sub-resource-id}</p><p>‍</p><h3>Endpoints</h3><p>Resource endpoints should follow at least View and <a target=""_blank"" href=""https://en.wikipedia.org/wiki/Create,_read,_update_and_delete"">CRUD</a> (Create, Read, Update, Delete) operations. These should be handled by using the same URI but using different HTTP verbs (POST/GET/PUT/PATCH/DELETE, more details about each verb in ( <a target=""_blank"" href=""https://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html"">https://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html</a> ) ).</p><p>Use nouns in the plural as resource names e.g. /products.</p><p>All used methods and their parameters have to be described in generated documentation endpoint by endpoint.</p><p>‍</p><h3>GET (read)</h3><p>The GET method requests data from the resource and should not produce any side effect. The possible parameters are sent as part of the URL or as query parameters.</p><h6>E.g GET /users</h6><ul><li>return a list of all users</li></ul><h6>E.g GET /users?limit=10&amp;skip=30</h6><ul><li>returns a list containing 10 users after skipping 30 users</li></ul><p>‍</p><h3>POST (create, do partial updates)</h3><p>The POST method requests the server to create a resource in the database. The payload is sent in the request message body. </p><p>POST is a non-idempotent operation which means that multiple requests targeted to the same endpoint with the same payload will have a different outcome.</p><h6>E.g POST /organizations/:id/managers</h6><ul><li>The first attempt creates a new Manager of Organization identified with :id. (If it did not exist already).</li></ul><h6>E.g POST /organizations/:id/managers</h6><ul><li>The second attempt with the same payload fails (because manager already existed) and an error response (4xx, manager already exists) is returned.</li></ul><p>‍</p><h3>PUT (create and update complete resources)</h3><p>The PUT method requests the server to update a resource, but it can also create it. The payload is sent in the request message body.Normally it is not possible to create a resource with PUT method, because resources are referenced with :id. In case resource with :id does not exist, a response with 404 Resource not found is sent unless you give a resource name (like file name) in the PUT request. Use POST to create a new resource and POST or PATCH to do partial updates.</p><p> </p><p>PUT is an idempotent operation which means multiple requests with the same payload targeted to the same endpoint will have the same effect and outcome, either successful update or resource not found.</p><h6>E.g. PUT /organizations/:id</h6><ul><li><strong>The </strong>first attempt will request the server to update the resource (identified with :id) in Organizations collection.</li><li> A successful response with 2xx is returned, if a resource is found.</li><li> In case the resource is not found, an error response with 4xx is returned.</li></ul><h6>E.g. PUT /organizations/:id</h6><ul><li><strong>Second </strong>attempt (with the same payload) will request the server to update the resource (identified with :id) in Organizations collection.</li><li> A successful response to 2xx is returned, if the resource is found.</li><li> In case the resource is not found, an error response with 4xx is returned.</li></ul><h4>DELETE (delete)</h4><p>DELETE method requests that the resource, or its instance, should be removed from the database. The operation is irreversible.</p><h6>E.g DELETE /apis/:id</h6><ul><li>Will request the server to delete the API identified with :id from Apis collection.</li><li> In a successful case a response with 204 is returned (no payload included).</li><li> In an unsuccessful case, a response with 4xx is returned.</li></ul><p>‍</p><h3>Error handling</h3><p>Just like an HTML error page shows a useful error message to a visitor, an API should provide a useful error message in a known consumable format. The representation of an error should be no different from the representation of any resource, just with its own set of fields.</p><p>The API should always return sensible HTTP status codes. API errors typically break down into 2 types: 400 series status codes for client issues &amp; 500 series status codes for server issues. At a minimum, the API should standardize that all 400 series errors come with consumable JSON error representation. If possible (i.e. if load balancers &amp; reverse proxies can create custom error bodies), this should extend to 500 series status codes.</p><p>A JSON error body should provide a few things for the developer - a useful error message, a unique error code (that can be looked up for more details in the docs) and possibly a detailed description.</p><p> JSON output representation for something like this would look like:</p><p>{ ""code"" : 1234, ""title"" : ""Organization is not found"", ""detail"" : ""Organization with specified ID is not found"" }</p><p>Validation errors for PUT, PATCH and POST requests will need a field breakdown. This is best modeled by using a fixed top-level error code for validation failures and providing the detailed errors in an additional errors field, like so:</p><p>{ ""code"" : 1024, ""title"" : ""Validation Failed"", ""detail"" : [ { ""code"" : 5432, ""title"" : ""first_name"", ""detail"" : ""First name cannot have fancy characters"" }, { ""code"" : 5622, ""title"" : ""password"", ""detail"" : ""Password cannot be blank""} ] }</p><p>‍</p><h3>Filtering</h3><p><strong>Paging</strong></p><p>Pages of results should be referred to consistently by the query parameters page and pageSize, where pageSize refers to the number of results per request, and page refers to the requested page.</p><p>Fields like totalItems and totalPages help provide context to paged results. Use the same fields with all resources to be consistent.</p><p>‍</p><p><strong>Hypermedia links</strong></p><p>Hypermedia links are high value in navigating paged resource collections, as page/pageSize query parameters can be maintained while navigating pages of results.</p><p>Links should be provided with reels of next, previous, first, last wherever appropriate. </p><p>‍</p><p><strong>Time selection</strong></p><p>startTime or {propertyName}After, endTime or {propertyName}Before query parameters should be provided if time selection is needed. All time values in the parameters and in the data have to be in the ISO format including timezone.</p><p>‍</p><p><strong>Sorting</strong></p><p>sortBy and sortOrder can be provided to allow for collection results to be sorted. sortBy should be a field in the individual resources, and sortOrder should be asc or desc.</p><p> </p><p><strong>URI Template</strong></p><p>GET /{namespace}/{version}/{resource}</p><p>‍</p><p><strong>Example Request</strong></p><p>GET /hardware/v1/products</p><p>‍</p><h3>Resource collection</h3><p>A list of all of the given resources, including any related metadata. The array of resources should be in the items field to help handle other fields than the actual resources being returned in the response.</p><p>Plan for security and provide a list of only those resources the requesting party is allowed to see.</p><p>If the resource response is really big, provide a possibility to include only those fields the client requires. Also add only those fields in the response, that you consider absolutely necessary. It’s easier to add more later when needed instead of removing that would be a breaking change.</p><p>‍</p><h3>Single resource</h3><p>A single resource, typically derived from the parent collection of resources (often more detailed than the collection resource items). </p><p>All identifiers for sensitive data should be non-sequential, and preferably non-numeric. In scenarios where this data might be used as a subordinate to other data, immutable string identifiers should be utilized for easier readability and debugging (i.e. “nameOfValue” vs 1421321).</p><h6>URI Template</h6><p>GET /{namespace}/{version}/{resource}/{resource-id}</p><h6>Example Request</h6><p>GET /hardware/v1/products/6438313255314</p><p>‍</p><p>‍</p><h4><br></h4><p><br></p>",,,,,7,interaction-canvas,api-audit-checklist-main,,api-delivery
